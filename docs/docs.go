// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-08-22 17:52:57.00938 +0700 +07 m=+0.027113009

package docs

import (
	"bytes"
	"encoding/json"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
	"swagger" : "2.0",
	"info" : {
	  "description" : "This is a sample server Runex server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key to test the authorization     filters.",
	  "version" : "0.9.0",
	  "title" : "API Runex",
	  "termsOfService" : "http://swagger.io/terms/",
	  "contact" : {
		"email" : "suthisak.ch@gmail.com"
	  },
	  "license" : {
		"name" : "Apache 2.0",
		"url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
	  }
	},
	"host" : "runex.io",
	"basePath" : "/v1",
	"tags" : [ {
	  "name" : "user",
	  "description" : "Operations about user",
	  "externalDocs" : {
		"description" : "Find out more about our store",
		"url" : "http://swagger.io"
	  }
	}, {
	  "name" : "event",
	  "description" : "Everything about your events",
	  "externalDocs" : {
		"description" : "Find out more",
		"url" : "http://swagger.io"
	  }
	}, {
	  "name" : "store",
	  "description" : "Access to eventstore orders"
	} ],
	"schemes" : [ "https", "http" ],
	"paths" : {
	  "/event" : {
		"post" : {
		  "tags" : [ "event" ],
		  "summary" : "Add a new event to the store",
		  "description" : "",
		  "operationId" : "addevent",
		  "consumes" : [ "application/json", "application/xml" ],
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"in" : "body",
			"name" : "body",
			"description" : "event object that needs to be added to the store",
			"required" : true,
			"schema" : {
			  "$ref" : "#/definitions/event"
			}
		  } ],
		  "responses" : {
			"405" : {
			  "description" : "Invalid input"
			}
		  },
		  "security" : [ {
			"eventstore_auth" : [ "write:events", "read:events" ]
		  } ]
		},
		"put" : {
		  "tags" : [ "event" ],
		  "summary" : "Update an existing event",
		  "description" : "",
		  "operationId" : "updateevent",
		  "consumes" : [ "application/json", "application/xml" ],
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"in" : "body",
			"name" : "body",
			"description" : "event object that needs to be added to the store",
			"required" : true,
			"schema" : {
			  "$ref" : "#/definitions/event"
			}
		  } ],
		  "responses" : {
			"400" : {
			  "description" : "Invalid ID supplied"
			},
			"404" : {
			  "description" : "event not found"
			},
			"405" : {
			  "description" : "Validation exception"
			}
		  },
		  "security" : [ {
			"eventstore_auth" : [ "write:events", "read:events" ]
		  } ]
		}
	  },
	  "/event/findByStatus" : {
		"get" : {
		  "tags" : [ "event" ],
		  "summary" : "Finds events by status",
		  "description" : "Multiple status values can be provided with comma separated strings",
		  "operationId" : "findeventsByStatus",
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"name" : "status",
			"in" : "query",
			"description" : "Status values that need to be considered for filter",
			"required" : true,
			"type" : "array",
			"items" : {
			  "type" : "string",
			  "default" : "available",
			  "enum" : [ "available", "pending", "sold" ]
			},
			"collectionFormat" : "multi"
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "schema" : {
				"type" : "array",
				"items" : {
				  "$ref" : "#/definitions/event"
				}
			  }
			},
			"400" : {
			  "description" : "Invalid status value"
			}
		  },
		  "security" : [ {
			"eventstore_auth" : [ "write:events", "read:events" ]
		  } ]
		}
	  },
	  "/event/findByTags" : {
		"get" : {
		  "tags" : [ "event" ],
		  "summary" : "Finds events by tags",
		  "description" : "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
		  "operationId" : "findeventsByTags",
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"name" : "tags",
			"in" : "query",
			"description" : "Tags to filter by",
			"required" : true,
			"type" : "array",
			"items" : {
			  "type" : "string"
			},
			"collectionFormat" : "multi"
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "schema" : {
				"type" : "array",
				"items" : {
				  "$ref" : "#/definitions/event"
				}
			  }
			},
			"400" : {
			  "description" : "Invalid tag value"
			}
		  },
		  "security" : [ {
			"eventstore_auth" : [ "write:events", "read:events" ]
		  } ],
		  "deprecated" : true
		}
	  },
	  "/event/{eventId}" : {
		"get" : {
		  "tags" : [ "event" ],
		  "summary" : "Find event by ID",
		  "description" : "Returns a single event",
		  "operationId" : "geteventById",
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"name" : "eventId",
			"in" : "path",
			"description" : "ID of event to return",
			"required" : true,
			"type" : "integer",
			"format" : "int64"
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "schema" : {
				"$ref" : "#/definitions/event"
			  }
			},
			"400" : {
			  "description" : "Invalid ID supplied"
			},
			"404" : {
			  "description" : "event not found"
			}
		  },
		  "security" : [ {
			"api_key" : [ ]
		  } ]
		},
		"post" : {
		  "tags" : [ "event" ],
		  "summary" : "Updates a event in the store with form data",
		  "description" : "",
		  "operationId" : "updateeventWithForm",
		  "consumes" : [ "application/x-www-form-urlencoded" ],
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"name" : "eventId",
			"in" : "path",
			"description" : "ID of event that needs to be updated",
			"required" : true,
			"type" : "integer",
			"format" : "int64"
		  }, {
			"name" : "name",
			"in" : "formData",
			"description" : "Updated name of the event",
			"required" : false,
			"type" : "string"
		  }, {
			"name" : "status",
			"in" : "formData",
			"description" : "Updated status of the event",
			"required" : false,
			"type" : "string"
		  } ],
		  "responses" : {
			"405" : {
			  "description" : "Invalid input"
			}
		  },
		  "security" : [ {
			"eventstore_auth" : [ "write:events", "read:events" ]
		  } ]
		},
		"delete" : {
		  "tags" : [ "event" ],
		  "summary" : "Deletes a event",
		  "description" : "",
		  "operationId" : "deleteevent",
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"name" : "api_key",
			"in" : "header",
			"required" : false,
			"type" : "string"
		  }, {
			"name" : "eventId",
			"in" : "path",
			"description" : "event id to delete",
			"required" : true,
			"type" : "integer",
			"format" : "int64"
		  } ],
		  "responses" : {
			"400" : {
			  "description" : "Invalid ID supplied"
			},
			"404" : {
			  "description" : "event not found"
			}
		  },
		  "security" : [ {
			"eventstore_auth" : [ "write:events", "read:events" ]
		  } ]
		}
	  },
	  "/event/{eventId}/uploadImage" : {
		"post" : {
		  "tags" : [ "event" ],
		  "summary" : "uploads an image",
		  "description" : "",
		  "operationId" : "uploadFile",
		  "consumes" : [ "multipart/form-data" ],
		  "produces" : [ "application/json" ],
		  "parameters" : [ {
			"name" : "eventId",
			"in" : "path",
			"description" : "ID of event to update",
			"required" : true,
			"type" : "integer",
			"format" : "int64"
		  }, {
			"name" : "additionalMetadata",
			"in" : "formData",
			"description" : "Additional data to pass to server",
			"required" : false,
			"type" : "string"
		  }, {
			"name" : "file",
			"in" : "formData",
			"description" : "file to upload",
			"required" : false,
			"type" : "file"
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "schema" : {
				"$ref" : "#/definitions/ApiResponse"
			  }
			}
		  },
		  "security" : [ {
			"eventstore_auth" : [ "write:events", "read:events" ]
		  } ]
		}
	  },
	  "/store/inventory" : {
		"get" : {
		  "tags" : [ "store" ],
		  "summary" : "Returns event inventories by status",
		  "description" : "Returns a map of status codes to quantities",
		  "operationId" : "getInventory",
		  "produces" : [ "application/json" ],
		  "parameters" : [ ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "schema" : {
				"type" : "object",
				"additionalProperties" : {
				  "type" : "integer",
				  "format" : "int32"
				}
			  }
			}
		  },
		  "security" : [ {
			"api_key" : [ ]
		  } ]
		}
	  },
	  "/store/order" : {
		"post" : {
		  "tags" : [ "store" ],
		  "summary" : "Place an order for a event",
		  "description" : "",
		  "operationId" : "placeOrder",
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"in" : "body",
			"name" : "body",
			"description" : "order placed for purchasing the event",
			"required" : true,
			"schema" : {
			  "$ref" : "#/definitions/Order"
			}
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "schema" : {
				"$ref" : "#/definitions/Order"
			  }
			},
			"400" : {
			  "description" : "Invalid Order"
			}
		  }
		}
	  },
	  "/store/order/{orderId}" : {
		"get" : {
		  "tags" : [ "store" ],
		  "summary" : "Find purchase order by ID",
		  "description" : "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
		  "operationId" : "getOrderById",
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"name" : "orderId",
			"in" : "path",
			"description" : "ID of event that needs to be fetched",
			"required" : true,
			"type" : "integer",
			"maximum" : 10,
			"minimum" : 1,
			"format" : "int64"
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "schema" : {
				"$ref" : "#/definitions/Order"
			  }
			},
			"400" : {
			  "description" : "Invalid ID supplied"
			},
			"404" : {
			  "description" : "Order not found"
			}
		  }
		},
		"delete" : {
		  "tags" : [ "store" ],
		  "summary" : "Delete purchase order by ID",
		  "description" : "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
		  "operationId" : "deleteOrder",
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"name" : "orderId",
			"in" : "path",
			"description" : "ID of the order that needs to be deleted",
			"required" : true,
			"type" : "integer",
			"minimum" : 1,
			"format" : "int64"
		  } ],
		  "responses" : {
			"400" : {
			  "description" : "Invalid ID supplied"
			},
			"404" : {
			  "description" : "Order not found"
			}
		  }
		}
	  },
	  "/user" : {
		"get" : {
		  "tags" : [ "user" ],
		  "summary" : "get user profile",
		  "description" : "",
		  "operationId" : "get profile user",
		  "produces" : [ "application/json", "application/xml" ],
		  "parameters" : [ ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "examples" : {
				"application/json" : {
				  "code" : 200,
				  "msg" : "success",
				  "data" : {
					"user" : {
					  "user_id" : "a2134bd56a7822",
					  "provider_id" : "a23e5134bd56a7822",
					  "email" : "example@mail.com",
					  "fullname" : "firstname lastname",
					  "firstname" : "firstname",
					  "lastname" : "lastname",
					  "phone" : "0123456789",
					  "avatar" : "image.jpg",
					  "address" : [ {
						"province" : "ขอนแก่น",
						"district" : "เมืองขอนแก่น",
						"city" : "ในเมือง",
						"addr" : "123 หมู่ 1",
						"zipcode" : "40000"
					  } ]
					}
				  }
				}
			  }
			},
			"401" : {
			  "description" : "Not authenticated",
			  "examples" : {
				"application/json" : {
				  "code" : 401,
				  "msg" : "Not authenticated",
				  "data" : { }
				}
			  }
			},
			"403" : {
			  "description" : "Access token does not have the required scope",
			  "examples" : {
				"application/json" : {
				  "code" : 403,
				  "msg" : "Access token does not have the required scope",
				  "data" : { }
				}
			  }
			},
			"404" : {
			  "description" : "User not found",
			  "examples" : {
				"application/json" : {
				  "code" : 404,
				  "msg" : "User not found",
				  "data" : { }
				}
			  }
			}
		  },
		  "security" : [ {
			"Bearer" : [ ]
		  } ]
		},
		"post" : {
		  "tags" : [ "user" ],
		  "summary" : "Create user",
		  "description" : "This can only be done by the logged in user.",
		  "operationId" : "createUser",
		  "produces" : [ "application/json" ],
		  "parameters" : [ {
			"in" : "body",
			"name" : "body",
			"description" : "Created user object",
			"required" : true,
			"schema" : {
			  "$ref" : "#/definitions/body_1"
			}
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "examples" : {
				"application/json" : {
				  "code" : 200,
				  "msg" : "success",
				  "data" : {
					"token" : "asdasde645j4j422343299983434mkdfgkdfl-dkglsdnxjfhsjdkfhskdjjfhjskdfh"
				  }
				}
			  }
			},
			"402" : {
			  "description" : "Email in use",
			  "examples" : {
				"application/json" : {
				  "code" : 401,
				  "msg" : "Email is use in system",
				  "data" : { }
				}
			  }
			}
		  }
		},
		"put" : {
		  "tags" : [ "user" ],
		  "summary" : "Updated user",
		  "description" : "This can only be done by the logged in user.",
		  "operationId" : "updateUser",
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"in" : "body",
			"name" : "body",
			"description" : "Updated user object",
			"required" : true,
			"schema" : {
			  "$ref" : "#/definitions/body"
			}
		  } ],
		  "responses" : {
			"401" : {
			  "description" : "Not authenticated"
			},
			"403" : {
			  "description" : "Access token does not have the required scope"
			},
			"404" : {
			  "description" : "User not found"
			}
		  },
		  "security" : [ {
			"Bearer" : [ ]
		  } ]
		},
		"delete" : {
		  "tags" : [ "user" ],
		  "summary" : "Delete user",
		  "description" : "This can only be done by the logged in user.",
		  "operationId" : "deleteUser",
		  "produces" : [ "application/json" ],
		  "parameters" : [ {
			"name" : "username",
			"in" : "path",
			"description" : "The name that needs to be deleted",
			"required" : true,
			"type" : "string"
		  } ],
		  "responses" : {
			"400" : {
			  "description" : "Invalid username supplied"
			},
			"404" : {
			  "description" : "User not found"
			}
		  }
		}
	  },
	  "/user/login" : {
		"post" : {
		  "tags" : [ "user" ],
		  "summary" : "user signin system",
		  "description" : "user signin system",
		  "operationId" : "loginUser",
		  "produces" : [ "application/json" ],
		  "parameters" : [ {
			"in" : "body",
			"name" : "body",
			"description" : "user signin system",
			"required" : true,
			"schema" : {
			  "$ref" : "#/definitions/body_2"
			}
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "examples" : {
				"application/json" : {
				  "code" : 200,
				  "msg" : "success",
				  "data" : {
					"token" : "asdasde645j4j422343299983434mkdfgkdfl-dkglsdnxjfhsjdkfhskdjjfhjskdfh"
				  }
				}
			  }
			},
			"401" : {
			  "description" : "Not authenticated",
			  "examples" : {
				"application/json" : {
				  "code" : 401,
				  "msg" : "Not authenticated",
				  "data" : { }
				}
			  }
			},
			"403" : {
			  "description" : "Access token does not have the required scope",
			  "examples" : {
				"application/json" : {
				  "code" : 403,
				  "msg" : "Access token does not have the required scope",
				  "data" : { }
				}
			  }
			},
			"404" : {
			  "description" : "User not found",
			  "examples" : {
				"application/json" : {
				  "code" : 404,
				  "msg" : "User not found",
				  "data" : { }
				}
			  }
			}
		  }
		}
	  },
	  "/user/provider" : {
		"post" : {
		  "tags" : [ "user" ],
		  "summary" : "Creates user with given social provider",
		  "description" : "",
		  "operationId" : "createUsersWithProvider",
		  "produces" : [ "application/json" ],
		  "parameters" : [ {
			"in" : "body",
			"name" : "body",
			"description" : "param from provider request callback",
			"required" : true,
			"schema" : {
			  "$ref" : "#/definitions/body_3"
			}
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "examples" : {
				"application/json" : {
				  "code" : 200,
				  "msg" : "success",
				  "data" : {
					"token" : "asdasde645j4j422343299983434mkdfgkdfl-dkglsdnxjfhsjdkfhskdjjfhjskdfh"
				  }
				}
			  }
			},
			"402" : {
			  "description" : "Email in use",
			  "examples" : {
				"application/json" : {
				  "code" : 401,
				  "msg" : "Email is use in system",
				  "data" : { }
				}
			  }
			}
		  }
		}
	  },
	  "/user/logout" : {
		"get" : {
		  "tags" : [ "user" ],
		  "summary" : "Logs out current logged in user session",
		  "description" : "",
		  "operationId" : "logoutUser",
		  "produces" : [ "application/json" ],
		  "parameters" : [ ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "examples" : {
				"application/json" : {
				  "code" : 200,
				  "msg" : "success",
				  "data" : {
					"avatar" : "image url"
				  }
				}
			  }
			},
			"401" : {
			  "description" : "Not authenticated",
			  "examples" : {
				"application/json" : {
				  "code" : 401,
				  "msg" : "Not authenticated",
				  "data" : { }
				}
			  }
			},
			"403" : {
			  "description" : "Access token does not have the required scope",
			  "examples" : {
				"application/json" : {
				  "code" : 403,
				  "msg" : "Access token does not have the required scope",
				  "data" : { }
				}
			  }
			},
			"404" : {
			  "description" : "User not found",
			  "examples" : {
				"application/json" : {
				  "code" : 404,
				  "msg" : "User not found",
				  "data" : { }
				}
			  }
			}
		  },
		  "security" : [ {
			"Bearer" : [ ]
		  } ]
		}
	  },
	  "/user/avatar" : {
		"get" : {
		  "tags" : [ "user" ],
		  "summary" : "get image avatar",
		  "description" : "",
		  "operationId" : "urlAvatar",
		  "produces" : [ "application/json" ],
		  "parameters" : [ ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "examples" : {
				"application/json" : {
				  "code" : 200,
				  "msg" : "success",
				  "data" : {
					"avatar" : "image url"
				  }
				}
			  }
			},
			"401" : {
			  "description" : "Not authenticated",
			  "examples" : {
				"application/json" : {
				  "code" : 401,
				  "msg" : "Not authenticated",
				  "data" : { }
				}
			  }
			},
			"403" : {
			  "description" : "Access token does not have the required scope",
			  "examples" : {
				"application/json" : {
				  "code" : 403,
				  "msg" : "Access token does not have the required scope",
				  "data" : { }
				}
			  }
			}
		  },
		  "security" : [ {
			"Bearer" : [ ]
		  } ]
		},
		"post" : {
		  "tags" : [ "user" ],
		  "summary" : "Uploads a file image.",
		  "consumes" : [ "multipart/form-data" ],
		  "produces" : [ "application/json" ],
		  "parameters" : [ {
			"name" : "upfile",
			"in" : "formData",
			"description" : "The file to upload.",
			"required" : false,
			"type" : "file"
		  } ],
		  "responses" : {
			"200" : {
			  "description" : "successful operation",
			  "examples" : {
				"application/json" : {
				  "code" : 200,
				  "msg" : "success",
				  "data" : {
					"avatar" : "image url"
				  }
				}
			  }
			},
			"401" : {
			  "description" : "Not authenticated",
			  "examples" : {
				"application/json" : {
				  "code" : 401,
				  "msg" : "Not authenticated",
				  "data" : { }
				}
			  }
			},
			"403" : {
			  "description" : "Access token does not have the required scope",
			  "examples" : {
				"application/json" : {
				  "code" : 403,
				  "msg" : "Access token does not have the required scope",
				  "data" : { }
				}
			  }
			},
			"404" : {
			  "description" : "User not found",
			  "examples" : {
				"application/json" : {
				  "code" : 404,
				  "msg" : "User not found",
				  "data" : { }
				}
			  }
			}
		  },
		  "security" : [ {
			"Bearer" : [ ]
		  } ]
		},
		"put" : {
		  "tags" : [ "user" ],
		  "summary" : "Upload an image for update avatar",
		  "consumes" : [ "multipart/form-data" ],
		  "produces" : [ "application/xml", "application/json" ],
		  "parameters" : [ {
			"name" : "upfile",
			"in" : "formData",
			"description" : "The file to upload.",
			"required" : false,
			"type" : "file"
		  } ],
		  "responses" : {
			"401" : {
			  "description" : "Not authenticated"
			},
			"403" : {
			  "description" : "Access token does not have the required scope"
			},
			"404" : {
			  "description" : "User not found"
			}
		  },
		  "security" : [ {
			"Bearer" : [ ]
		  } ]
		}
	  }
	},
	"securityDefinitions" : {
	  "Bearer" : {
		"type" : "apiKey",
		"name" : "Authorization",
		"in" : "header"
	  },
	  "eventstore_auth" : {
		"type" : "oauth2",
		"authorizationUrl" : "http://eventstore.swagger.io/oauth/dialog",
		"flow" : "implicit",
		"scopes" : {
		  "write:events" : "modify events in your account",
		  "read:events" : "read your events"
		}
	  },
	  "api_key" : {
		"type" : "apiKey",
		"name" : "api_key",
		"in" : "header"
	  }
	},
	"definitions" : {
	  "Order" : {
		"type" : "object",
		"properties" : {
		  "id" : {
			"type" : "integer",
			"format" : "int64"
		  },
		  "eventId" : {
			"type" : "integer",
			"format" : "int64"
		  },
		  "quantity" : {
			"type" : "integer",
			"format" : "int32"
		  },
		  "shipDate" : {
			"type" : "string",
			"format" : "date-time"
		  },
		  "status" : {
			"type" : "string",
			"description" : "Order Status",
			"enum" : [ "placed", "approved", "delivered" ]
		  },
		  "complete" : {
			"type" : "boolean",
			"default" : false
		  }
		},
		"xml" : {
		  "name" : "Order"
		}
	  },
	  "Response" : {
		"type" : "object",
		"properties" : {
		  "code" : {
			"type" : "integer"
		  },
		  "msg" : {
			"type" : "string"
		  },
		  "data" : {
			"type" : "object",
			"properties" : { }
		  }
		},
		"xml" : {
		  "name" : "Response"
		}
	  },
	  "Category" : {
		"type" : "object",
		"properties" : {
		  "id" : {
			"type" : "string",
			"format" : "hexadecimal"
		  },
		  "name" : {
			"type" : "string"
		  },
		  "active" : {
			"type" : "boolean"
		  }
		},
		"xml" : {
		  "name" : "Category"
		}
	  },
	  "User" : {
		"type" : "object",
		"properties" : {
		  "id" : {
			"type" : "string",
			"format" : "hexadecimal"
		  },
		  "firstName" : {
			"type" : "string"
		  },
		  "lastName" : {
			"type" : "string"
		  },
		  "email" : {
			"type" : "string"
		  },
		  "phone" : {
			"type" : "string"
		  },
		  "avatar" : {
			"type" : "string"
		  },
		  "userStatus" : {
			"type" : "integer",
			"format" : "int32",
			"description" : "User Status"
		  },
		  "address" : {
			"type" : "array",
			"xml" : {
			  "name" : "tag",
			  "wrapped" : true
			},
			"items" : {
			  "$ref" : "#/definitions/Address"
			}
		  }
		},
		"xml" : {
		  "name" : "User"
		}
	  },
	  "UserProvider" : {
		"type" : "object",
		"properties" : {
		  "id" : {
			"type" : "string",
			"format" : "hexadecimal"
		  },
		  "fullname" : {
			"type" : "string"
		  },
		  "firstName" : {
			"type" : "string"
		  },
		  "lastName" : {
			"type" : "string"
		  },
		  "email" : {
			"type" : "string"
		  },
		  "phone" : {
			"type" : "string"
		  },
		  "avatar" : {
			"type" : "string"
		  }
		},
		"xml" : {
		  "name" : "User"
		}
	  },
	  "Address" : {
		"type" : "object",
		"properties" : {
		  "province" : {
			"type" : "string"
		  },
		  "district" : {
			"type" : "string"
		  },
		  "city" : {
			"type" : "string"
		  },
		  "addr" : {
			"type" : "string"
		  },
		  "zipcode" : {
			"type" : "string"
		  }
		},
		"xml" : {
		  "name" : "Tag"
		}
	  },
	  "Tag" : {
		"type" : "object",
		"properties" : {
		  "id" : {
			"type" : "integer",
			"format" : "int64"
		  },
		  "name" : {
			"type" : "string"
		  }
		},
		"xml" : {
		  "name" : "Tag"
		}
	  },
	  "event" : {
		"type" : "object",
		"required" : [ "cover", "name" ],
		"properties" : {
		  "name" : {
			"type" : "string",
			"example" : "มหกรรมจัดแสดงสินค้าลดราคา"
		  },
		  "cover" : {
			"type" : "string",
			"example" : "cover.jpg",
			"xml" : {
			  "name" : "photoUrl",
			  "wrapped" : true
			}
		  },
		  "category" : {
			"$ref" : "#/definitions/Category"
		  },
		  "tags" : {
			"type" : "array",
			"xml" : {
			  "name" : "tag",
			  "wrapped" : true
			},
			"items" : {
			  "$ref" : "#/definitions/Tag"
			}
		  },
		  "status" : {
			"type" : "string",
			"description" : "event status in the store",
			"enum" : [ "available", "pending", "sold" ]
		  }
		},
		"xml" : {
		  "name" : "event"
		}
	  },
	  "ApiResponse" : {
		"type" : "object",
		"properties" : {
		  "code" : {
			"type" : "integer",
			"format" : "int32"
		  },
		  "type" : {
			"type" : "string"
		  },
		  "message" : {
			"type" : "string"
		  }
		}
	  },
	  "body" : {
		"type" : "object",
		"properties" : {
		  "firstName" : {
			"type" : "string"
		  },
		  "lastName" : {
			"type" : "string"
		  },
		  "email" : {
			"type" : "string"
		  },
		  "password" : {
			"type" : "string"
		  },
		  "phone" : {
			"type" : "string"
		  }
		}
	  },
	  "body_1" : {
		"type" : "object",
		"properties" : {
		  "firstName" : {
			"type" : "string"
		  },
		  "lastName" : {
			"type" : "string"
		  },
		  "email" : {
			"type" : "string"
		  },
		  "password" : {
			"type" : "string"
		  },
		  "tel" : {
			"type" : "string"
		  },
		  "fcm_token" : {
			"type" : "string"
		  }
		}
	  },
	  "body_2" : {
		"type" : "object",
		"properties" : {
		  "email" : {
			"type" : "string"
		  },
		  "password" : {
			"type" : "string"
		  },
		  "fcm_token" : {
			"type" : "string"
		  },
		  "pf" : {
			"type" : "string",
			"description" : "m is mobile, other is not send"
		  }
		}
	  },
	  "body_3" : {
		"type" : "object",
		"properties" : {
		  "user" : {
			"$ref" : "#/definitions/UserProvider"
		  },
		  "fcm_token" : {
			"type" : "string"
		  },
		  "pf" : {
			"type" : "string",
			"description" : "m is mobile, other is not send"
		  }
		}
	  }
	},
	"externalDocs" : {
	  "description" : "Find out more about Swagger",
	  "url" : "http://swagger.io"
	}
  }`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{Schemes: []string{}}

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
